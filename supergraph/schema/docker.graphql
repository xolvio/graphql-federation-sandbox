schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.4", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/tag/v0.3")
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
  @link(url: "https://myspecs.dev/myDirective/v1.0", import: ["@myDirective", {name: "@anotherDirective", as: "@hello"}])
{
  query: Query
}

directive @hello on FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__directive(graphs: [join__Graph!], name: String!, args: join__DirectiveArguments) repeatable on SCHEMA | OBJECT | INTERFACE | FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean, overrideLabel: String) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

directive @myDirective(a: String!) on FIELD_DEFINITION

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION | SCHEMA

type Account
  @join__type(graph: ACCOUNTS, key: "billingAccountNumber")
  @join__type(graph: BILL_HISTORY, key: "billingAccountNumber")
{
  id: ID! @join__field(graph: ACCOUNTS)
  billingAccountNumber: String!
  name: String @join__field(graph: ACCOUNTS)
  email: String @join__field(graph: ACCOUNTS)
  settings: AccountSettings @join__field(graph: ACCOUNTS) @join__field(graph: BILL_HISTORY, external: true)
  amountDue: Float @join__field(graph: ACCOUNTS)
  balance: Float @join__field(graph: ACCOUNTS)
}

type AccountSettings
  @join__type(graph: ACCOUNTS)
  @join__type(graph: BILL_HISTORY)
{
  paperless: Boolean
}

interface BillDetail
  @join__type(graph: ACCOUNTS)
  @join__type(graph: BILL_HISTORY)
{
  id: ID!
  isCurrent: Boolean! @join__field(graph: BILL_HISTORY)
  hints: [BillDetailHint] @join__field(graph: BILL_HISTORY)
}

type BillDetailHint
  @join__type(graph: BILL_HISTORY)
{
  id: ID!
  body: String
}

union BillDetailResponse
  @join__type(graph: BILL_HISTORY)
  @join__unionMember(graph: BILL_HISTORY, member: "CurrentBillDetail")
  @join__unionMember(graph: BILL_HISTORY, member: "PastBillDetail")
 = CurrentBillDetail | PastBillDetail

type CurrentBillDetail implements BillDetail
  @join__implements(graph: ACCOUNTS, interface: "BillDetail")
  @join__implements(graph: BILL_HISTORY, interface: "BillDetail")
  @join__type(graph: ACCOUNTS, key: "id")
  @join__type(graph: BILL_HISTORY, key: "id")
{
  id: ID!
  account: Account @join__field(graph: ACCOUNTS) @join__field(graph: BILL_HISTORY, external: true)
  isCurrent: Boolean! @join__field(graph: BILL_HISTORY)
  hints: [BillDetailHint] @join__field(graph: BILL_HISTORY, requires: "account { settings { paperless } }")
}

type DeliveryEstimates
  @join__type(graph: INVENTORY)
{
  estimatedDelivery: String
  fastestDelivery: String
}

scalar join__DirectiveArguments

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts", url: "http://localhost:4005/graphql")
  BILL_HISTORY @join__graph(name: "bill-history", url: "http://localhost:4006/graphql")
  INVENTORY @join__graph(name: "inventory", url: "http://inventory:4000/graphql")
  PRODUCTS @join__graph(name: "products", url: "http://products:4000/graphql")
  REVIEWS @join__graph(name: "reviews", url: "http://reviews:4000/graphql")
  USERS @join__graph(name: "users", url: "http://users:4000/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type PastBillDetail implements BillDetail
  @join__implements(graph: BILL_HISTORY, interface: "BillDetail")
  @join__type(graph: BILL_HISTORY)
{
  id: ID!
  isCurrent: Boolean!
  hints: [BillDetailHint]
}

type Product implements ProductItf & SkuItf
  @join__implements(graph: INVENTORY, interface: "ProductItf")
  @join__implements(graph: PRODUCTS, interface: "ProductItf")
  @join__implements(graph: PRODUCTS, interface: "SkuItf")
  @join__implements(graph: REVIEWS, interface: "ProductItf")
  @join__type(graph: INVENTORY, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: PRODUCTS, key: "sku package")
  @join__type(graph: PRODUCTS, key: "sku variation { id }")
  @join__type(graph: REVIEWS, key: "id")
{
  id: ID! @tag(name: "hi-from-products")
  dimensions: ProductDimension @join__field(graph: INVENTORY, external: true) @join__field(graph: PRODUCTS)
  delivery(zip: String): DeliveryEstimates @join__field(graph: INVENTORY, requires: "dimensions { size weight }")
  sku: String @join__field(graph: PRODUCTS)
  name: String @join__field(graph: PRODUCTS) @hello
  package: String @join__field(graph: PRODUCTS)
  variation: ProductVariation @join__field(graph: PRODUCTS)
  createdBy: User @join__field(graph: PRODUCTS)
  hidden: String @join__field(graph: PRODUCTS)
  reviewsScore: Float! @join__field(graph: REVIEWS, override: "products")
  oldField: String @join__field(graph: PRODUCTS)
  reviewsCount: Int! @join__field(graph: PRODUCTS, external: true) @join__field(graph: REVIEWS)
  discount: Float @join__field(graph: PRODUCTS, requires: "reviewsCount")
  reviews: [Review!]! @join__field(graph: REVIEWS)
}

type ProductDimension
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
{
  size: String @hello
  weight: Float
}

interface ProductItf implements SkuItf
  @join__implements(graph: PRODUCTS, interface: "SkuItf")
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
{
  id: ID!
  dimensions: ProductDimension @join__field(graph: INVENTORY) @join__field(graph: PRODUCTS)
  delivery(zip: String): DeliveryEstimates @join__field(graph: INVENTORY)
  sku: String @join__field(graph: PRODUCTS)
  name: String @join__field(graph: PRODUCTS)
  package: String @join__field(graph: PRODUCTS)
  variation: ProductVariation @join__field(graph: PRODUCTS)
  createdBy: User @join__field(graph: PRODUCTS)
  hidden: String @inaccessible @join__field(graph: PRODUCTS)
  oldField: String @join__field(graph: PRODUCTS) @deprecated(reason: "refactored out")
  reviewsCount: Int! @join__field(graph: REVIEWS)
  reviewsScore: Float! @join__field(graph: REVIEWS)
  reviews: [Review!]! @join__field(graph: REVIEWS)
}

type ProductVariation
  @join__type(graph: PRODUCTS)
{
  id: ID!
  name: String
}

type Query
  @join__type(graph: ACCOUNTS)
  @join__type(graph: BILL_HISTORY)
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
  @join__type(graph: REVIEWS)
  @join__type(graph: USERS)
{
  accounts: [Account] @join__field(graph: ACCOUNTS)
  account(billingAccountNumber: String!): Account @join__field(graph: ACCOUNTS)
  bills: [BillDetailResponse] @join__field(graph: BILL_HISTORY)
  allProducts: [ProductItf] @join__field(graph: PRODUCTS)
  product(id: ID!): ProductItf @join__field(graph: PRODUCTS)
  review(id: Int!): Review @join__field(graph: REVIEWS)
}

type Review
  @join__type(graph: REVIEWS)
{
  id: Int!
  body: String!
}

enum ShippingClass
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
{
  STANDARD @join__enumValue(graph: INVENTORY) @join__enumValue(graph: PRODUCTS)
  EXPRESS @join__enumValue(graph: INVENTORY) @join__enumValue(graph: PRODUCTS)
  OVERNIGHT @join__enumValue(graph: INVENTORY)
}

interface SkuItf
  @join__type(graph: PRODUCTS)
{
  sku: String
}

type User
  @join__type(graph: PRODUCTS, key: "email")
  @join__type(graph: USERS, key: "email")
{
  email: ID! @tag(name: "test-from-users")
  totalProductsCreated: Int
  name: String @join__field(graph: USERS)
}
